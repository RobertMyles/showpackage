required_by <- append(req1, req2)
## filter Imports and depends to find package
if(return_val == "data"){
return(desc)
} else{
# format output
none_format <- function(x){
res <- ifelse(!is.na(x), x, "None")
}
return_string <- paste0(
"Package: ", none_format(desc$Package), "\n",
"Version: ", none_format(desc$Version), "\n",
"Depends: ", none_format(desc$Depends), "\n",
"Imports: ", none_format(desc$Imports), "\n",
"LinkingTo: ", none_format(desc$LinkingTo), "\n",
"Description: ", none_format(desc$Description), "\n",
"Maintainer: ", none_format(desc$Maintainer), "\n",
"Maintainer Email: ", none_format(desc$MaintainerEmail), "\n",
"Homepage: ", none_format(desc$URL), "\n",
"Required-by: ", required_by, "\n",
"Location: ", pkg_path
)
cat(return_string)
}
}
show_pkg("zoo")
package <- "zoo"
req1 <- x$Package[grep(package, x$Imports)]
req2 <- x$Package[grep(package, x$Depends)]
append(req1, req2)
#x <- as.data.frame(installed.packages(fields = c("URL", "Description", "Maintainer")), stringsAsFactors = FALSE)
#!/usr/bin/env Rscript --vanilla
show_pkg <- function(package = NULL, lib_path = NULL,
return_value = c("print", "data")){
# checks
if (is.null(lib_path)) lib_path <- .libPaths()
if(is.null(package)) stop("Please specifiy a package.")
# args
return_val <- match.arg(return_value, choices = c("print", "data"))
fields <- c("Package", "Version", "Depends", "Imports", "LinkingTo",
"URL", "Description", "Maintainer")
# get package
pkgs <- list.files(lib_path)
pkg_check <- package %in% pkgs
if(pkg_check) {
pkg_desc <- file.path(lib_path, package, "DESCRIPTION")
pkg_path <- file.path(lib_path, package)
}
# get package details
desc <- tryCatch(read.dcf(pkg_desc, fields = fields),
error = identity)
desc <- as.data.frame(desc, stringsAsFactors = FALSE)
desc$MaintainerEmail <- strsplit(desc$Maintainer, split = "<")[[1]][[2]]
desc$MaintainerEmail <- gsub(">", "", x = desc$MaintainerEmail)
desc$Maintainer <- strsplit(desc$Maintainer, split = "<")[[1]][[1]]
desc$Maintainer <- gsub("<", "", x = desc$Maintainer)
# get 'required-by':
x <- installed.packages(lib.loc = lib_path)
x <- as.data.frame(x, stringsAsFactors = FALSE)
req1 <- x$Package[grep(package, x$Imports)]
req2 <- x$Package[grep(package, x$Depends)]
required_by <- append(req1, req2)
## filter Imports and depends to find package
if(return_val == "data"){
return(desc)
} else{
# format output
none_format <- function(x){
res <- ifelse(!is.na(x), x, "None")
}
return_string <- paste0(
"Package: ", none_format(desc$Package), "\n",
"Version: ", none_format(desc$Version), "\n",
"Depends: ", none_format(desc$Depends), "\n",
"Imports: ", none_format(desc$Imports), "\n",
"LinkingTo: ", none_format(desc$LinkingTo), "\n",
"Description: ", none_format(desc$Description), "\n",
"Maintainer: ", none_format(desc$Maintainer), "\n",
"Maintainer Email: ", none_format(desc$MaintainerEmail), "\n",
"Homepage: ", none_format(desc$URL), "\n",
"Required-by: ", cat(required_by), "\n",
"Location: ", pkg_path
)
cat(return_string)
}
}
show_pkg("zoo")
#x <- as.data.frame(installed.packages(fields = c("URL", "Description", "Maintainer")), stringsAsFactors = FALSE)
#!/usr/bin/env Rscript --vanilla
show_pkg <- function(package = NULL, lib_path = NULL,
return_value = c("print", "data")){
# checks
if (is.null(lib_path)) lib_path <- .libPaths()
if(is.null(package)) stop("Please specifiy a package.")
# args
return_val <- match.arg(return_value, choices = c("print", "data"))
fields <- c("Package", "Version", "Depends", "Imports", "LinkingTo",
"URL", "Description", "Maintainer")
# get package
pkgs <- list.files(lib_path)
pkg_check <- package %in% pkgs
if(pkg_check) {
pkg_desc <- file.path(lib_path, package, "DESCRIPTION")
pkg_path <- file.path(lib_path, package)
}
# get package details
desc <- tryCatch(read.dcf(pkg_desc, fields = fields),
error = identity)
desc <- as.data.frame(desc, stringsAsFactors = FALSE)
desc$MaintainerEmail <- strsplit(desc$Maintainer, split = "<")[[1]][[2]]
desc$MaintainerEmail <- gsub(">", "", x = desc$MaintainerEmail)
desc$Maintainer <- strsplit(desc$Maintainer, split = "<")[[1]][[1]]
desc$Maintainer <- gsub("<", "", x = desc$Maintainer)
# get 'required-by':
x <- installed.packages(lib.loc = lib_path)
x <- as.data.frame(x, stringsAsFactors = FALSE)
req1 <- x$Package[grep(package, x$Imports)]
req2 <- x$Package[grep(package, x$Depends)]
required_by <- append(req1, req2)
## filter Imports and depends to find package
if(return_val == "data"){
return(desc)
} else{
# format output
none_format <- function(x){
res <- ifelse(!is.na(x), x, "None")
}
return_string <- paste0(
"Package: ", none_format(desc$Package), "\n",
"Version: ", none_format(desc$Version), "\n",
"Depends: ", none_format(desc$Depends), "\n",
"Imports: ", none_format(desc$Imports), "\n",
"LinkingTo: ", none_format(desc$LinkingTo), "\n",
"Description: ", none_format(desc$Description), "\n",
"Maintainer: ", none_format(desc$Maintainer), "\n",
"Maintainer Email: ", none_format(desc$MaintainerEmail), "\n",
"Homepage: ", none_format(desc$URL), "\n",
"Required-by: ", required_by, "\n",
"Location: ", pkg_path
)
cat(return_string)
}
}
show_pkg("zoo")
#x <- as.data.frame(installed.packages(fields = c("URL", "Description", "Maintainer")), stringsAsFactors = FALSE)
#!/usr/bin/env Rscript --vanilla
show_pkg <- function(package = NULL, lib_path = NULL,
return_value = c("print", "data")){
# checks
if (is.null(lib_path)) lib_path <- .libPaths()
if(is.null(package)) stop("Please specifiy a package.")
# args
return_val <- match.arg(return_value, choices = c("print", "data"))
fields <- c("Package", "Version", "Depends", "Imports", "LinkingTo",
"URL", "Description", "Maintainer")
# get package
pkgs <- list.files(lib_path)
pkg_check <- package %in% pkgs
if(pkg_check) {
pkg_desc <- file.path(lib_path, package, "DESCRIPTION")
pkg_path <- file.path(lib_path, package)
}
# get package details
desc <- tryCatch(read.dcf(pkg_desc, fields = fields),
error = identity)
desc <- as.data.frame(desc, stringsAsFactors = FALSE)
desc$MaintainerEmail <- strsplit(desc$Maintainer, split = "<")[[1]][[2]]
desc$MaintainerEmail <- gsub(">", "", x = desc$MaintainerEmail)
desc$Maintainer <- strsplit(desc$Maintainer, split = "<")[[1]][[1]]
desc$Maintainer <- gsub("<", "", x = desc$Maintainer)
# get 'required-by':
x <- installed.packages(lib.loc = lib_path)
x <- as.data.frame(x, stringsAsFactors = FALSE)
req1 <- x$Package[grep(package, x$Imports)]
req2 <- x$Package[grep(package, x$Depends)]
required_by <- append(req1, req2)
print(required_by)
## filter Imports and depends to find package
if(return_val == "data"){
return(desc)
} else{
# format output
none_format <- function(x){
res <- ifelse(!is.na(x), x, "None")
}
return_string <- paste0(
"Package: ", none_format(desc$Package), "\n",
"Version: ", none_format(desc$Version), "\n",
"Depends: ", none_format(desc$Depends), "\n",
"Imports: ", none_format(desc$Imports), "\n",
"LinkingTo: ", none_format(desc$LinkingTo), "\n",
"Description: ", none_format(desc$Description), "\n",
"Maintainer: ", none_format(desc$Maintainer), "\n",
"Maintainer Email: ", none_format(desc$MaintainerEmail), "\n",
"Homepage: ", none_format(desc$URL), "\n",
"Required-by: ", required_by, "\n",
"Location: ", pkg_path
)
cat(return_string)
}
}
show_pkg("zoo")
required_by <- append(req1, req2)
paste0(required_by, collapse = "")
paste0(required_by, collapse = ", ")
#x <- as.data.frame(installed.packages(fields = c("URL", "Description", "Maintainer")), stringsAsFactors = FALSE)
#!/usr/bin/env Rscript --vanilla
show_pkg <- function(package = NULL, lib_path = NULL,
return_value = c("print", "data")){
# checks
if (is.null(lib_path)) lib_path <- .libPaths()
if(is.null(package)) stop("Please specifiy a package.")
# args
return_val <- match.arg(return_value, choices = c("print", "data"))
fields <- c("Package", "Version", "Depends", "Imports", "LinkingTo",
"URL", "Description", "Maintainer")
# get package
pkgs <- list.files(lib_path)
pkg_check <- package %in% pkgs
if(pkg_check) {
pkg_desc <- file.path(lib_path, package, "DESCRIPTION")
pkg_path <- file.path(lib_path, package)
}
# get package details
desc <- tryCatch(read.dcf(pkg_desc, fields = fields),
error = identity)
desc <- as.data.frame(desc, stringsAsFactors = FALSE)
desc$MaintainerEmail <- strsplit(desc$Maintainer, split = "<")[[1]][[2]]
desc$MaintainerEmail <- gsub(">", "", x = desc$MaintainerEmail)
desc$Maintainer <- strsplit(desc$Maintainer, split = "<")[[1]][[1]]
desc$Maintainer <- gsub("<", "", x = desc$Maintainer)
# get 'required-by':
x <- installed.packages(lib.loc = lib_path)
x <- as.data.frame(x, stringsAsFactors = FALSE)
req1 <- x$Package[grep(package, x$Imports)]
req2 <- x$Package[grep(package, x$Depends)]
required_by <- append(req1, req2)
required_by <- paste0(required_by, collapse = ", ")
## filter Imports and depends to find package
if(return_val == "data"){
return(desc)
} else{
# format output
none_format <- function(x){
res <- ifelse(!is.na(x), x, "None")
}
return_string <- paste0(
"Package: ", none_format(desc$Package), "\n",
"Version: ", none_format(desc$Version), "\n",
"Depends: ", none_format(desc$Depends), "\n",
"Imports: ", none_format(desc$Imports), "\n",
"LinkingTo: ", none_format(desc$LinkingTo), "\n",
"Description: ", none_format(desc$Description), "\n",
"Maintainer: ", none_format(desc$Maintainer), "\n",
"Maintainer Email: ", none_format(desc$MaintainerEmail), "\n",
"Homepage: ", none_format(desc$URL), "\n",
"Required-by: ", required_by, "\n",
"Location: ", pkg_path
)
cat(return_string)
}
}
show_pkg("zoo")
## filter Imports and depends to find package
if(return_val == "data"){
return(desc)
} else{
# format output
none_format <- function(x){
res <- ifelse(!is.na(x), x, "None")
}
return_string <- paste0(
"Package: ", none_format(desc$Package), "\n",
"Version: ", none_format(desc$Version), "\n",
"Depends: ", none_format(desc$Depends), "\n",
"Imports: ", none_format(desc$Imports), "\n",
"LinkingTo: ", none_format(desc$LinkingTo), "\n",
"Description: ", none_format(desc$Description), "\n",
"Maintainer: ", none_format(desc$Maintainer), "\n",
"Maintainer Email: ", none_format(desc$MaintainerEmail), "\n",
"Homepage: ", none_format(desc$URL), "\n",
"Required by: ", required_by, "\n",
"Location: ", pkg_path
)
cat(return_string)
}
#x <- as.data.frame(installed.packages(fields = c("URL", "Description", "Maintainer")), stringsAsFactors = FALSE)
#!/usr/bin/env Rscript --vanilla
show_pkg <- function(package = NULL, lib_path = NULL,
return_value = c("print", "data")){
# checks
if (is.null(lib_path)) lib_path <- .libPaths()
if(is.null(package)) stop("Please specifiy a package.")
# args
return_val <- match.arg(return_value, choices = c("print", "data"))
fields <- c("Package", "Version", "Depends", "Imports", "LinkingTo",
"URL", "Description", "Maintainer")
# get package
pkgs <- list.files(lib_path)
pkg_check <- package %in% pkgs
if(pkg_check) {
pkg_desc <- file.path(lib_path, package, "DESCRIPTION")
pkg_path <- file.path(lib_path, package)
}
# get package details
desc <- tryCatch(read.dcf(pkg_desc, fields = fields),
error = identity)
desc <- as.data.frame(desc, stringsAsFactors = FALSE)
desc$MaintainerEmail <- strsplit(desc$Maintainer, split = "<")[[1]][[2]]
desc$MaintainerEmail <- gsub(">", "", x = desc$MaintainerEmail)
desc$Maintainer <- strsplit(desc$Maintainer, split = "<")[[1]][[1]]
desc$Maintainer <- gsub("<", "", x = desc$Maintainer)
# get 'required-by':
x <- installed.packages(lib.loc = lib_path)
x <- as.data.frame(x, stringsAsFactors = FALSE)
req1 <- x$Package[grep(package, x$Imports)]
req2 <- x$Package[grep(package, x$Depends)]
required_by <- append(req1, req2)
required_by <- paste0(required_by, collapse = ", ")
## filter Imports and depends to find package
if(return_val == "data"){
return(desc)
} else{
# format output
none_format <- function(x){
res <- ifelse(!is.na(x), x, "None")
}
return_string <- paste0(
"Package: ", none_format(desc$Package), "\n",
"Version: ", none_format(desc$Version), "\n",
"Depends: ", none_format(desc$Depends), "\n",
"Imports: ", none_format(desc$Imports), "\n",
"LinkingTo: ", none_format(desc$LinkingTo), "\n",
"Description: ", none_format(desc$Description), "\n",
"Maintainer: ", none_format(desc$Maintainer), "\n",
"Maintainer Email: ", none_format(desc$MaintainerEmail), "\n",
"Homepage: ", none_format(desc$URL), "\n",
"Required by: ", required_by, "\n",
"Location: ", pkg_path
)
cat(return_string)
}
}
show_pkg("zoo")
show_pkg("dplyr")
show_pkg("MASS")
show_pkg("base")
show_pkg("ggplot2")
R.home("bin")
file.path(R.home("bin"), "Rscript.exe")
isWindows()
show_pkg("congressbr")
show_pkg("tidyRSS")
show_pkg("Rcpp")
?conditionMessage
?message
doc <- "Usage:
showpackage <package>
showpackage help"
message(doc)
docopt::docopt(doc)
install.packages("docopt")
install.packages("docopt")
docopt::docopt(doc)
tryCatch({
opts <- docopt::docopt(doc)
}, error = function(err){
msg <- conditionMessage(err)
if (!grepl("usage:", msg)) {
warn(msg)
}
message(doc)
quit(status=1)
})
doc <- "Usage:
showpackage <package>
showpackage help"
opts <- NULL
tryCatch({
opts <- docopt::docopt(doc)
}, error = function(err){
msg <- conditionMessage(err)
if (!grepl("usage:", msg)) {
warn(msg)
}
message(doc)
#quit(status=1)
})
doc <- ""
opts <- NULL
tryCatch({
opts <- docopt::docopt(doc)
}, error = function(err){
msg <- conditionMessage(err)
if (!grepl("usage:", msg)) {
warn(msg)
}
message(doc)
#quit(status=1)
})
opts <- docopt::docopt(doc)
opts <- docopt::docopt(doc)
msg <- conditionMessage(err)
devtools::load_all()
devtools::check()
devtools::document()
devtools::check()
version <- "3.5"  #just an example
old.packages <- list.files(paste0("/Library/Frameworks/R.framework/Versions/", version, "/Resources/library"))
for (p in old.packages) {
# ... Only if p is not already installed
if (!(p %in% installed.packages()[,"Package"])) {
# Install p
install.packages(p)
}
}
new_packages <- as.data.frame(installed.packages(), stringsAsFactors = F)$Package
old.packages !%in% new_packages
old.packages %in% new_packages
old.packages[!old.packages %in% new_packages]
rm(list = ls())
devtools::load_all()
show_pkg("tidyr")
devtools::document()
devtools::document()
devtools::document()
cli()
devtools::load_all()
cli()
devtools::check()
devtools::check()
devtools::load_all()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::run_examples()
devtools::build_win()
devtools::check_rhub()
devtools::release_checks()
tools::dependsOnPkgs("dplyr")
tools::dependsOnPkgs("congressbr")
package.dependencies("magrittr")
tools::package.dependencies("magrittr")
tools::package_dependencies("magrittr")
remotes::install_github("hadley/emo")
emo::ji("confused")
lib_path <- .libPaths()
package = "magrittr"
fields <- c("Package", "Version", "Depends", "Imports", "LinkingTo",
"URL", "Description", "Maintainer")
# get package
pkgs <- list.files(lib_path)
pkg_check <- package %in% pkgs
if(pkg_check) {
pkg_desc <- file.path(lib_path, package, "DESCRIPTION")
pkg_path <- file.path(lib_path, package)
} else{
stop("You don't have this package installed.")
}
# get package details
desc <- tryCatch(read.dcf(pkg_desc, fields = fields),
error = identity)
desc
install.packages("badger")
devtools::install_github("GuangchuangYu/badger")
devtools::install_github("GuangchuangYu/badger")
devtools::check()
packageVersion("docopt")
devtools::check()
devtools::check()
devtools::document()
devtools::check()
show_pkg("magrittr")
devtools::document()
devtools::check()
devtools::use_mit_license()
devtools::use_mit_license("Robert Myles McDonnell")
usethis::use_mit_license("Robert Myles McDonnell")
devtools::check()
devtools::check()
usethis::use_news_md()
devtools::check_win_release()
devtools::check_win_release()
library(readxl)
matrix <- matrix(1,2,2)
block <- cbind(list("ones","more ones"),matrix)
df <- data.frame(block)
df
install.packages("writexl")
library(writexl)
write_xlsx(df, path = "data.xlsx", col_names = FALSE, format_headers = FALSE)
write_xlsx(data, path = "data.xlsx", col_names = FALSE, format_headers = FALSE)
df
?write_xlsx
?write_xlsx
data = list("sheet1" = df)
write_xlsx(data, path = "data1.xlsx", col_names = FALSE, format_headers = FALSE)
, col_names = FALSE, format_headers = FALSE
write_xlsx(data, path = "data1.xlsx")
data
dff <- mtcars
write_xlsx(dff, path = "data1.xlsx")
df <- data.frame(
X1 = c("ones", "more ones"),
X2 = c(1, 1),
X3 = c(1, 1)
)
write_xlsx(df, path = "data.xlsx", col_names = FALSE, format_headers = FALSE)
block <- cbind(list("ones","more ones"),matrix)
df <- data.frame(block)
str(df)
